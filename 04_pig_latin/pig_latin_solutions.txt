 
module PigLatinTranslator
  def translate(s)
    s.split.map do |word|
      v = first_vowel(word)
      word.slice(v..-1) + word[0,v] + "ay"
    end.join(" ")
  end
  
  def first_vowel(word)
    if word =~ /^qu/
      2
    else
      word.gsub(/[aeiou].*$/, '').size
    end
  end
end
module PigLatinTranslator
    def translate(s)
        words = s.split(' ')
        words = words.map do |word|
            if word[0].chr == 'q' 
                parts = ['qu', word.slice(2,word.length-2)]
            else 
                parts = word.split(/([aeiou].*)/)     
            end
            parts[1] + parts[0] + "ay"
        end
        words.join(' ')
    end
end
module PigLatinTranslator

    # Basic pig latin translation rules are:
    #  - if word begins with consonant, move consonant to end + append 'ay'
    #  - if word begins with a vowel append 'ay'to end
    #  - if word begins with 'qu' move these to the end and append 'ay' 

    private
    # private method to convert a single word to pig latin
    # this solution uses regular expressions to match search patterns
    # also uses 'case' statements rather than nested 'if/then/else' constructs
 
    def translateword(word)
          res = case word
          when /^[aeiouy]/
             # test for leading vowels (e.g. 'eat')
             # append 'ay' to end of string
             word+"ay"

          when /^(qu+)(.*)/   
          	# test for leading 'qu' string (special case)
          	# note the use of the parenthesis here to save 
          	# the matching substrings to the variables '$1' and '$2' respectively
            $2+$1+"ay"

          when /([^aeiouy]+)(.*)/
            # test for leading consonants (non vowels - e.g. 'stupid') 
            # also note the use of parenthesis as in the previous case
            # '$1' variable here will capture the leading consonants in a word
            # '$2' variable will capture the remainder of the word
            $2+$1+"ay"
          else
            # if no matches return word (should never happen)
            word
        end
    end

    def translate(phrase)
        #puts "transate word:  #{phrase}"
        puts
        piglist = []
        # split phrase into array of words
        wlist = phrase.split
        # iterate over thearray elements
        wlist.each do |w|
            piglist << translateword(w)
         end
        # print a trace here if you want to see what is happening
        # note the use of inspect here to show the individual array elements
        puts "word/phrase:  #{phrase}; pig latin translation:  #{piglist.inspect} \n"
        # Assemble the converted words into a new phrase
        res = piglist.join(" ")  
    end
end
module PigLatinTranslator

    def translate(s)
      puts "english phrase is: "+s
      words = s.split
      pigified = [] 
      
      for word in words
        if  word[/^[aeiou]/]
          word = word+"ay"
        else
          if word[/^[qu]/] 
           word.slice!(/^qu/)
           ending = "quay"           
          else
           ending = word.slice!(0...(word.index(/[aeiou]/,1)))+"ay"
          end
          word = word << ending
        end 
        pigified << word
      end
      puts "pig latin phrase is: "+pigified.join(" ")
      return pigified.join(" ")
    end
end
module PigLatinTranslator
  def translate(s)
    words = s.split
      s = words.map do |s|
      l = s.length   
        if /^[aeiou]/ .match(s)
           s + "ay"
        elsif /^qu/ .match(s[0..1])
            s[2..(l+1)] + s[0..1] + "ay"
        elsif /[aeiou]/ .match(s[1..1])
            s[1..(l+1)] + s[0..0] + "ay"
        else
            s[2..(l+1)] + s[0..1] + "ay"
        end
      end 
      s = s.join(" ")
  end
end

module PigLatinTranslator

  def translate(word)
    words = word.split(" ")
    arrResult = []
    words.each do |word|
      m = word.match(/^(qu)*[^aeiou]*/)
      if(m.nil?)
        arrResult << add_ay(word)
      else
        arrResult <<  add_ay(m.post_match + m.to_s)
      end    
    end
    arrResult.join(" ")
  end
  
  def add_ay(word)
    word + "ay"
  end  

end

require "#{File.dirname(__FILE__)}/pig_latin"

describe "translate" do
  include PigLatinTranslator

  it "should translate a simple word" do
    s = translate("nix")
    s.should == "ixnay"
  end

  it "should translate a word beginning with a vowel" do
    pending
    s = translate("apple")
    s.should == "appleay"
  end

  it "should translate a two consonant word: stupid" do
    pending
    s = translate("stupid")
    s.should == "upidstay"
  end

  it "should translate two words: eat pie" do
    pending
    s = translate("eat pie")
    s.should == "eatay iepay"
  end

  it "should translate multiple words: the quick brown fox" do
    pending
    s = translate("the quick brown fox")
    s.should == "ethay ickquay ownbray oxfay"
  end

end